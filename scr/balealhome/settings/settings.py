"""
Django settings for balealhome project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '7ncq*d+s7v8^3#%u-#2u9tjrjdwedk*mo*e=jyzfw2p+74kqyq'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition
# Приложения разбиты на2 списка: первый - глобальные зависимости, второй - специфичные для данного проекта.
PREREQ_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

PROJECT_APPS = [
    'balealhome.cashflow',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... include the providers you want to enable:
#     'allauth.socialaccount.providers.facebook',
#     'allauth.socialaccount.providers.foursquare',
#     'allauth.socialaccount.providers.google',
#     'allauth.socialaccount.providers.instagram',
#     'allauth.socialaccount.providers.paypal',
#     'allauth.socialaccount.providers.twitter',
#     'allauth.socialaccount.providers.untappd',
#     'allauth.socialaccount.providers.vk',
]

INSTALLED_APPS = PREREQ_APPS + PROJECT_APPS

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware', # Для интернационализации
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]









ROOT_URLCONF = 'balealhome.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'balealhome.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'balealhome',
        'USER': 'root',
        'PASSWORD': 'Disel260879',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}

# Список источников аутентификации для проверки пользователя (для allauth)
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

# EMAIL_BACKEND so allauth can proceed to send confirmation emails
# ONLY for development/testing use console
EMAIL_BACKEND='django.core.mail.backends.console.EmailBackend'
#пока SMTP что-то не работает
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# Custom allauth settings
# Use email as the primary identifier
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
# Make email verification mandatory to avoid junk email accounts
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
# Eliminate need to provide username, as it's a very old practice
ACCOUNT_USERNAME_REQUIRED = False
#ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = False #временно, для настройки
#LOGIN_REDIRECT_URL = 'accounts/profile'

# для активации нового логина для django-registration, а может и не только
#ACCOUNT_ACTIVATION_DAYS = 2 # кол-во дней для хранения кода активации
# для отправки кода активации  для django-registration, а может и не только
#AUTH_USER_EMAIL_UNIQUE = True
#пока SMTP что-то не работает
#MAIL_HOST = 'spl26.hosting.reg'            #EMAIL_HOST = 'smtp.gmail.com'
#EMAIL_PORT = 465                   #EMAIL_PORT = 465
#EMAIL_HOST_USER = 'info@balealhome.com'                #EMAIL_HOST_USER = 'my_mail@gmail.com'
#SMTP host password: AnoTravessaNcasa!
#EMAIL_HOST_PASSWORD = '2011Travessa5'           #EMAIL_HOST_PASSWORD = 'password'
#EMAIL_USE_TLS = False               #EMAIL_USE_TLS = False
#EMAIL_USE_SSL = True
#DEFAULT_FROM_EMAIL = 'info@balealhome.com'#DEFAULT_FROM_EMAIL = 'my_mail@gmail.com'

#SMTP host password: AnoTravessaNcasa!


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'
LANGUAGES = [
	('ru', 'Russian'),
	('en', 'English'),
    ('pt', 'Portuguese'),
#    ('fr', 'French'),
]
# Кортеж путей к папкам, в которых будут храниться файлы локализации
LOCALE_PATHS = (
	os.path.join(BASE_DIR, 'locale'),
)

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
